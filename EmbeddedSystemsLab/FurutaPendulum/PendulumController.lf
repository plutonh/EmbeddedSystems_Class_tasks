target C{
    flags: "-lm"
}

reactor PendulumController {
    preamble {=
        #include <math.h>
    =}

    input theta:double;    // Pendulum angle.
    input d_theta:double;  // Pendulum angular velocity.
    input phi:double;      // Arm angle.
    input d_phi:double;    // Arm angular velocity.

    output u:double;

    // declare variables as 'double' type
    state ci1:double(-1.04945717118225);
    state ci2:double(-0.20432286791216);
    state ci3:double(-0.00735846749875);
    state ci4:double(-0.00735846749875);
    state si1:double(-1.70871686211144);
    state si2:double(-0.30395427746831);
    state si3:double(-0.03254225945714);
    state si4:double(-0.05808270221773);
    state ph2:double(-7.0124562);

    state Energy:double;       // variable for storing statement of Energy
    state Control:double;      // variable for storing statement of Control
    state phi_variable:double; // variagle for storing value of 'phi -> value' 

reaction(theta, d_theta, phi, d_phi) -> u {=
    // declare statement of 'self->Energy'
    self->Energy  = 0.5 * pow(d_theta -> value, 2) / pow(6.3, 2) + 
                    cos(theta -> value) - 1;

    // if absolue vaule of theta is smaller than 0.2, have to go to the 'Catch' state
    // and if larger than 0.2, then have to go to the 'SwingUp' state
    if(fabs(theta -> value) < 0.2) {
        // declare statement of 'self->Control' of 'Catch' state
        self->Control = -1 * (theta -> value * self -> ci1 + d_theta -> value * 
                        self -> ci2 + (phi -> value - self -> ph2) * self -> ci3 + 
                        d_phi -> value * self -> ci4);
    }
    else {
        // declare statement of 'self->Contol' of 'SwingUp' state
        self->Control = sign(self->Energy) * sign(d_theta -> value * 
                        cos(theta -> value)) * fmin(fabs(0.5 * self->Energy), 0.5);
    }

    // if absolute vaule of d_phi is smaller than 0.05, have to go to the 'Stabilize' state
    if(fabs(d_phi -> value) < 0.05) {
        self->phi_variable = phi -> value;
        self->Control = -1 * (theta -> value * self -> si1 + d_theta -> value * 
                        self -> si2 + (phi -> value - self->phi_variable) * 
                        self -> si3 + d_phi -> value * self -> si4);
    }

    // Continuously set the output 'u' as a 'self->Control' value
    lf_set(u, self->Control);
=}

}