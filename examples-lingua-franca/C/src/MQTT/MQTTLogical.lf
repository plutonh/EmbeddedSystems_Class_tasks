/**
 * This program periodically publishes on a topic and, in a different
 * part of the program, subscribes to the same topic. The publisher has
 * `include_timestamp` set to `true`, and the subscriber has `use_physical_time`
 * set to `false`. The program has no other activity, so as long as
 * the time between publishing of events is larger than the total
 * latency through the MQTT broker, the subscriber will see messages
 * one microstep later than the publisher. By setting a positive `offset`
 * at the subscriber, you can increase the logical time of the received
 * message and get a zero microstep. This gives behavior similar to an
 * LF connection with an `after` delay.
 * 
 * See README.md for prerequisites and further information.
 * 
 * @author Ravi Akella
 * @author Edward A. Lee
 */
target C {
    cmake-include: [
        "include/paho-extension.cmake", // For #include "MQTTClient.h"
        "include/net_utils.cmake"       // For encode_int64()
    ],
    timeout: 10 secs,
};
  
import MQTTPublisher from "lib/MQTTPublisher.lf";
import MQTTSubscriber from "lib/MQTTSubscriber.lf";
import MessageGenerator, PrintMessage from "lib/MQTTTestReactors.lf";

main reactor {
    pub = new MQTTPublisher(
        topic = "my/test",
        address = "tcp://localhost:1883",
        include_timestamp = true
    );
    msg = new MessageGenerator(root = "Hello World");
    msg.message->pub.in;
    
    sub = new MQTTSubscriber(
        address = "tcp://localhost:1883",
        topic = "my/test",
        use_physical_time = false,
        offset = 0
    );
    dsp = new PrintMessage();
    sub.message->dsp.message;
}
