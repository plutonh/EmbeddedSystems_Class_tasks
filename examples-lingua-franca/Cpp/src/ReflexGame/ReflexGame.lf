/**
 * This example illustrates the use of logical and physical actions,
 * asynchronous external inputs, the use of startup and shutdown
 * reactions, and the use of actions with values.
 * 
 * @author Felix Wittwer
 * @author Edward A. Lee
 * @author Marten Lohstroh
 */
target Cpp {
    keepalive: true,
    cmake-include: "ReflexGame.cmake"
};

/**
 * Produce a counting sequence at random times with a minimum
 * and maximum time between outputs specified as parameters.
 * 
 * @param min_time The minimum time between outputs.
 * @param max_time The maximum time between outputs.
 */
reactor RandomSource(min_time:time(2 sec), max_time:time(8 sec)) {
    private preamble {=
        // Generate a random additional delay over the minimum. 
        // Assume millisecond precision is enough.
        reactor::Duration additional_time(reactor::Duration min_time, reactor::Duration max_time) {
            int interval_in_msec = (max_time - min_time) / std::chrono::milliseconds(1);
            return (std::rand() % interval_in_msec) * std::chrono::milliseconds(1);
        }
    =}
    input another: void;
    output out: void;
    logical action prompt(min_time);
    state count: int(0);
    
    reaction(startup) -> prompt {=
        std::cout << "***********************************************" << std::endl;
        std::cout << "Watch for the prompt, then hit Return or Enter." << std::endl;
        std::cout << "Type Control-D (EOF) to quit." << std::endl << std::endl;

        // TODO: Manual inclusion of header necessary?
        // Set a seed for random number generation based on the current time.
        std::srand(std::time(nullptr));

        // Schedule the first event.
        prompt.schedule(additional_time(0ms, max_time - min_time));
    =}
    reaction(prompt) -> out {=
        count++;
        std::cout << count << ". Hit Return or Enter!" << std::endl << std::flush;
        out.set();
    =}
    reaction(another) -> prompt {=
        // Schedule the next event.
        prompt.schedule(additional_time(0ms, max_time - min_time));
    =}
}

/**
 * Upon receiving a prompt, record the time of the prompt,
 * then listen for user input. When the user hits return,
 * then schedule a physical action that records the time
 * of this event and then report the response time.
 */
reactor GetUserInput {
    public preamble {=
        #include <thread>
    =}

    physical action user_response: char;
    state prompt_time: {= reactor::TimePoint =} ({= reactor::TimePoint::min() =});
    state total_time: time(0);
    state count: int(0);
    state thread: {= std::thread =};

    input prompt: void;
    output another: void;

    reaction(startup) -> user_response {=
        // Start the thread that listens for Enter or Return.
        thread = std::thread([&] () {
            int c;
            while(1) {
                while((c = getchar()) != '\n') {
                    if (c == EOF) break;
                }
                user_response.schedule(c, 0ms);
                if (c == EOF) break;
            } 
        });
    =}

    reaction(prompt) {=
        prompt_time = get_physical_time();
    =}

    reaction(user_response) -> another {=
       auto c = user_response.get();
        if (*c == EOF) {
            environment()->sync_shutdown();
            return;
        }
        // If the prompt_time is 0, then the user is cheating and
        // hitting return before being prompted.
        if (prompt_time == reactor::TimePoint::min()) {
            std::cout << "YOU CHEATED!" << std::endl;
            environment()->sync_shutdown();
        } else {
            reactor::TimePoint logical = get_logical_time();
            std::chrono::duration elapsed = (logical - prompt_time);
            auto time_in_ms = std::chrono::duration_cast<std::chrono::milliseconds>(elapsed);
            std::cout << "Response time in milliseconds: " << time_in_ms << std::endl;
            count++;
            total_time += time_in_ms;
            // Reset the prompt_time to indicate that there is no new prompt.
            prompt_time = reactor::TimePoint::min();
            // Trigger another prompt.
            another.set();
        }
    =}

    reaction(shutdown) {=
        thread.join();
        if (count > 0) {
            std::cout << std::endl << "**** Average response time: " << std::chrono::duration_cast<std::chrono::milliseconds>(total_time/count) << std::endl;
        } else {
            std::cout << std::endl << "**** No attempts." << std::endl;
        }
    =}
}
main reactor ReflexGame {
    p = new RandomSource();
    g = new GetUserInput();
    p.out -> g.prompt;
    g.another -> p.another;
}

