target C {
    threading: true,
    compile-definitions: {
        EXECUTABLE_PREAMBLE: "",
        WORKERS_NEEDED_FOR_FEDERATE: "1",
        NUMBER_OF_FEDERATES: "3",
        FEDERATED: "",
        FEDERATED_CENTRALIZED: ""
    },
    cmake-include: "include/C_extension.cmake",
    _fed_setup: "include/_C_preamble.h",
    keepalive: true
}

NONE preamble {=
#include <stdio.h>
struct {
    void* open;
    void* close;
    void* ready;
    void* not;
} buttons;

void* read_input_1(void* arg) { // keyboard input funciton for Cockpit reactor
    printf("***************************************************************\n");
    printf("Press 'o' and hit return or enter to open the door\n");
    printf("Press 'c' and hit return or enter to close the door\n");
    printf("Press 'Control-d' to exit\n");
    while(1) {
        int c = getchar();
        if (c == 'o') {
            lf_schedule(buttons.open, 0);
        }
        if (c == 'c') {
            lf_schedule(buttons.close, 0);
        }
        if (c == EOF) {
            break;
        }
    }
    lf_request_stop();
    return NULL;
}

void* read_input_2(void* arg) { // keyboard input funciton for VisionMonitor reactor
    printf("***************************************************************\n");
    printf("Press 'r' and hit return or enter to open the ramp\n");
    printf("Press 'n' and hit return or enter to close the ramp\n");
    printf("Press 'Control-d' to exit\n");
    while(1) {
        int c = getchar();
        if (c == 'r') {
            lf_schedule(buttons.ready, 0);
        }
        if (c == 'n') {
            lf_schedule(buttons.not, 0);
        }
        if (c == EOF) {
            break;
        }
    }
    lf_request_stop();
    return NULL;
}
=}

reactor Cockpit {
    // Produces a bool to issue a command to open or close the door.
    output open: bool
    // Aciton to determine if the 'door' is already open.
    physical action open_check
    // Aciton to determine if the 'door' is already close.
    physical action close_check

    reaction(startup) ->
    open_check, close_check {=
        // Activaing 'read_input' function for receiving input character.
        lf_thread_t thread_id_1;
        lf_thread_create(&thread_id_1, &read_input_1, NULL);
        buttons.open = open_check;   // Causes an action for the 'o' character.
        buttons.close = close_check; // Causes an action for the 'c' character.
    =}

    // When 'o' character is inputted, an action that opens the door occurs and
    // saves 'true' in the 'open'.
    reaction(open_check) ->
    open {=
        lf_set(open, true);
        // printf("%ld", lf_time_logical_elapsed());
    =}

    // When 'c' character is inputted, an action that closes the door occurs and
    // saves 'false' in the 'open'.
    reaction(close_check) ->
    open {=
        lf_set(open, false);
        // printf("%ld", lf_time_logical_elapsed());
    =}
}
@_fed_config(network_message_actions="")
main reactor  {

    C = new Cockpit()
    
    
    
    
    @_unordered
    reaction(C.open) {=
        // **** This reaction is unordered.
        // Sending from C.open in federate C to D.open in federate D
        if (!C.open->is_present) return;
        size_t message_length = sizeof(bool);
        send_message(MSG_TYPE_P2P_MESSAGE, 0, 2, "federate 2", message_length, (unsigned char*)&C.open->value);
    =}
}
