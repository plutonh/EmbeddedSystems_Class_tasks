target C {
    threading: true,
    compile-definitions: {
        EXECUTABLE_PREAMBLE: "",
        WORKERS_NEEDED_FOR_FEDERATE: "3",
        NUMBER_OF_FEDERATES: "3",
        FEDERATED: "",
        FEDERATED_CENTRALIZED: ""
    },
    cmake-include: "include/D_extension.cmake",
    _fed_setup: "include/_D_preamble.h",
    keepalive: true
}

NONE preamble {=
#include <stdio.h>
struct {
    void* open;
    void* close;
    void* ready;
    void* not;
} buttons;

void* read_input_1(void* arg) { // keyboard input funciton for Cockpit reactor
    printf("***************************************************************\n");
    printf("Press 'o' and hit return or enter to open the door\n");
    printf("Press 'c' and hit return or enter to close the door\n");
    printf("Press 'Control-d' to exit\n");
    while(1) {
        int c = getchar();
        if (c == 'o') {
            lf_schedule(buttons.open, 0);
        }
        if (c == 'c') {
            lf_schedule(buttons.close, 0);
        }
        if (c == EOF) {
            break;
        }
    }
    lf_request_stop();
    return NULL;
}

void* read_input_2(void* arg) { // keyboard input funciton for VisionMonitor reactor
    printf("***************************************************************\n");
    printf("Press 'r' and hit return or enter to open the ramp\n");
    printf("Press 'n' and hit return or enter to close the ramp\n");
    printf("Press 'Control-d' to exit\n");
    while(1) {
        int c = getchar();
        if (c == 'r') {
            lf_schedule(buttons.ready, 0);
        }
        if (c == 'n') {
            lf_schedule(buttons.not, 0);
        }
        if (c == EOF) {
            break;
        }
    }
    lf_request_stop();
    return NULL;
}
=}

reactor Door {
    input open: bool
    input disarm: bool

    // Variable to determine if a door is already open
    state door_opened: bool(false)
    // Variable to determine if a door is already close
    state door_closed: bool(true)
    // Variable to determine if a ramp is already open
    state ramp_opened: bool(false)
    // Variable to determine if a ramp is already close
    state ramp_closed: bool(true)

    // Variable to store the first time the character 'o' was entered
    state timestamp: time(0)

    reaction(
        open
    ) {=
        // If the time at which the currently entered open action occurred
        // is less than 2 seconds after subtracting the stored variable from
        // the time at which the previously entered open action occurred,
        // an emergency situation is executed.
        if(open->value && (lf_time_logical_elapsed() - self->timestamp) < SECS(2)) {
            printf("%ld nsec: Emergency Open!!\n", lf_time_logical_elapsed());
            self->door_opened = true;
            self->door_closed = false;
        }

        // Conditions to determine if a door is already open
        else if(open->value && self->door_opened) {
            printf("%ld nsec: Door already open\n", lf_time_logical_elapsed());
        }

        // Conditions for checking the situation to open the door
        else if(open->value && self->door_opened == false && self->ramp_opened) {
            printf("%ld nsec: Opening Door\n", lf_time_logical_elapsed());
            self->door_opened = true;
            self->door_closed = false;
        }

        // Conditions to determine if the ramp is detected before opening the door
        else if(open->value && self->door_opened == false && self->ramp_closed) {
            printf("%ld nsec: No ramp detected\n", lf_time_logical_elapsed());
        }

        // Conditions to determine if the door is already closed
        else if(open->value == false && self->door_closed) {
            printf("%ld nsec: Door already close\n", lf_time_logical_elapsed());
        }

        // Conditions to check the situation to close the door
        else {
            printf("%ld nsec: Closing Door\n", lf_time_logical_elapsed());
            self->door_closed = true;
            self->door_opened = false;
        }

        // Save the time when an action occurred through the first 'o'
        self->timestamp = lf_time_logical_elapsed();
    =}

    reaction(  // armed: ramp doesn't exist, disarmed: ramp exists
        disarm
    ) {=
        if(disarm->value) {
            printf("%ld nsec: Ramp ready: true\n", lf_time_logical_elapsed());
            self->ramp_opened = true;
            self->ramp_closed = false;
        }
        else {
            printf("%ld nsec: Ramp ready: false\n", lf_time_logical_elapsed());
            self->ramp_closed = true;
            self->ramp_opened = false;
        }
    =}
}
@_fed_config(network_message_actions="networkMessage,networkMessage_0")
main reactor  {

    D = new Door()
    
    physical action networkMessage: bool
    physical action networkMessage_0: bool
    
    
    @_unordered
    reaction(networkMessage) -> D.open {=
        // **** This reaction is unordered.
        D.open->physical_time_of_arrival = self->_lf__networkMessage.physical_time_of_arrival;
        lf_set(D.open, networkMessage->value);
    =}
    @_unordered
    reaction(networkMessage_0) -> D.disarm {=
        // **** This reaction is unordered.
        D.disarm->physical_time_of_arrival = self->_lf__networkMessage_0.physical_time_of_arrival;
        lf_set(D.disarm, networkMessage_0->value);
    =}
}
