target C {
    compile-definitions: {
        EXECUTABLE_PREAMBLE: "",
        WORKERS_NEEDED_FOR_FEDERATE: "1",
        NUMBER_OF_FEDERATES: "7",
        FEDERATED: "",
        FEDERATED_CENTRALIZED: ""
    },
    threading: true,
    _fed_setup: "include/_S1_preamble.h",
    keepalive: true,
    cmake-include: "include/S1_extension.cmake"
}


reactor Sensor1 {
    output blocked: bool
}
@_fed_config(network_message_actions="")
main reactor  {

    S1 = new Sensor1()
    
    logical action outputControlReactionTrigger
    
    
    @_unordered
    reaction(S1.blocked) {=
        // **** This reaction is unordered.
        // Sending from S1.blocked in federate S1 to A.sensor_1 in federate A
        if (!S1.blocked->is_present) return;
        size_t message_length = sizeof(bool);
        send_timed_message(NEVER, MSG_TYPE_TAGGED_MESSAGE, 0, 0, "federate 0 via the RTI", message_length, (unsigned char*)&S1.blocked->value);
    =}
    @_unordered
    reaction(outputControlReactionTrigger) S1.blocked {=
        // **** This reaction is unordered.
        // If the output port has not been lf_set for the current logical time,
        // send an ABSENT message to the receiving federate
        LF_PRINT_LOG("Contemplating whether to send port "
                  "absent for port %d to federate %d.",
                  0, 0);
        if (S1.blocked == NULL || !S1.blocked->is_present) {
            // The output port is NULL or it is not present.
            send_port_absent_to_federate(NEVER, 0, 0);
        }
    =}
}
