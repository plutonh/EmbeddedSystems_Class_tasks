target C {
    timeout: 3 sec
   }
   reactor Count(offset: time(0), period: time(1 sec), stride: int(1)) {
    state count: int(1)
    output out: int
    timer t(offset, period)
    reaction(t) -> out {=
    lf_set(out, self->count);
    self->count += self->stride;
    =}
   }
   reactor TestCount(start: int(2), stride: int(1), num_inputs: int(1)) {
    state count: int(start)
    state inputs_received: int(0)
    input in: int
    reaction(in) {=
    lf_print("Received %d.", in->value);
    // Checks if the input port value and count matches.
    if (in->value != self->count) {
    lf_print_error_and_exit("Expected %d.", self->count);
    }
    self->count += self->stride;
    self->inputs_received++;
    =}
    reaction(shutdown) {=
    lf_print("Shutdown invoked.");
    if (self->inputs_received != self->num_inputs) {
    lf_print_error_and_exit("Expected to receive %d inputs, but got %d.",
    self->num_inputs,
   self->inputs_received
    );
    }
    =}
   }
   main reactor CountTestC {
    count = new Count(stride = 3)
    test = new TestCount(start = 1 , stride = 3, num_inputs = 4)
    count.out -> test.in
   }   