target C
reactor LogicalAction{
    output out: int
    state count: int(0)
    logical action a
    reaction(startup, a) -> a, out {=
    if(self->count == 0) {
        lf_set(out, self->count);
        lf_schedule(a, SEC(1));
        self->count += 1;
    }
    else if(self->count == 1) {
        lf_set(out, self->count);
        lf_schedule(a, SEC(1));
        self->count += 2;
    }
    else if((self->count == 3) || (self->count == 13) || (self->count == 23)) {
        lf_set(out, self->count);
        lf_schedule(a, 0);
        self->count += 10;
    }
    =}
}
reactor Printer{
    input in:int // out of LogicalAction
    reaction (in){=
    lf_print("In: %d, Logical Elapsed Time: %lld nsec, Micro step: %d"
    , in -> value, lf_time_logical_elapsed(), lf_tag().microstep);
    =}
}
main reactor Lab3{
    first = new LogicalAction();
    second = new Printer();
    first.out -> second.in after 1 sec;
}


// Below is solution
// target C

// reactor LogicalAction {
//     state count:int(0)
//     state micro_count:int(0)
//     output out:int
//     logical action a

//     reaction (startup, a) -> a, out {=
//         if(self->count < 3) {
//             lf_schedule(a, SEC(1));
//             lf_set(out, self->count);
//             self->count++; 
//         }
//         if(self->count == 3 && self->micro_count < 3) {
//             lf_schedule(a, 0);
//             lf_set(out, self->count + self->micro_count * 10);
//             self->micro_count++;
//         }
//         // In the first if statement, count has a value of 2 
//         // and the lf_set command is executed, 
//         // but then count is updated to 3 by self->count++ 
//         // and in the second if statement executed simultaneously, 
//         // count is overwritten to 3 by lf_set, 
//         // so the In value is 3 immediately after 1 is output. 
//     =}
// }

// reactor Printer{
//     input in:int // out of LogicalAction
//     reaction (in){=
//     lf_print("In: %d, Logical Elapsed Time: %lld nsec, Micro step: %d"
//     , in -> value, lf_time_logical_elapsed(), lf_tag().microstep);
//     =}
// }

// main reactor Lab3{
//     first = new LogicalAction();
//     second = new Printer();
//     first.out -> second.in after 1 sec;
// }